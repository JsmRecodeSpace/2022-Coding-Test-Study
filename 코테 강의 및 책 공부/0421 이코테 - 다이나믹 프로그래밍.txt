
# 다이나믹 프로그래밍
 - 다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법임
 - 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법
 - 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다
 - 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 보텀업)으로 구성된다.
	 - 탑다운 방식: 재귀 함수를 이용하여 다이나믹 프로그래밍 소스코드를 작성하는 방법
	 - 보텀업 방식: 반복문을 이용하여 소스코드를 작성하는 경우 작은 문제부터 차근차근 답을 도출

 - 다음 조건을 만족할 때 사용할 수 있다
    - 1. 최적 부분 구조: 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
    - 2. 중복되는 부분 문제: 동일한 작은 문제를 반복적으로 해결해야 한다.

 - 점화식이란 '인접한 항들 사이의 관계식'을 의미함
 - 메모이제이션(Memoization): 메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로,
   한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다.
   -> 한 번 구한 정보를 리스트에 저장한다

 - 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식임.
    - 보텀업 방식에서 사용되는 결과 저장용 리스트를 'DP 테이블'이라고 부름
    - 가능하다면 보텀업 방식으로 구현하는 것을 권장
 - 문제를 풀때 주어진 문제가 다이나믹 프로그래밍 유형임을 파악해야 함


# TopDown
# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]

print(fibo(99))

# BottomUp
# 앞서 계산된 결과를 저장하기 위한 DP테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n+1):
    d[i] = d[i - 1] + d[i -2]

print(d[n])

















