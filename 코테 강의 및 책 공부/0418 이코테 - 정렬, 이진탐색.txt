
# 정렬
 - 데이터를 특정한 기준에 따라서 순서대로 나열하는 것
 - 정렬 알고리즘으로 데이터를 정렬하면 이진 탐색(Binary Search)가 가능해짐
 - 선택 정렬, 삽입 정렬, 퀵 정렬, 계수 정렬 등이 있음



#### 1. 선택 정렬
 - 데이터가 무작위로 여러 개 있을 때, 
   이 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고,  
   그 다음 작은 데이터를 선태개해 앞에서 두 번째와 바꾸는 과정을 반복
 - 매번 '가장 작은 것을 선택'한다는 의미에서 선택 정렬 알고리즘이라고 함
 - 가장 작은 것을 선택해서 앞으로 보내는 과정을 반복해서 수행하다 보면, 전체 데이터의 정렬이 이루어짐
 - 선택 정렬은 가장 작은 데이터를 앞으로 보내는 과정을 N - 1번 반복하면 정렬이 완료되는 것을 알 수 있음.
 - 선택 정렬의 시간 복잡도는 O(N^2)이다. 소스코드 상으로 간단한 형태의 2중 반복문이 사용되었기 때문.
 - 선택 정렬은 다른 정렬 알고리즘에 비교해서 매우 비효율적이지만,
   가장 작은 데이터를 찾는 일이 코딩 테스트에서 잦으므로 선택 정렬 소스 코드 형태에 익숙해질 필요는 있음

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_idx = i # 가장 작은 원소의 인덱스
    for j in range(i + 1, len(array)):
        if array[min_idx] > array[j]:
            min_idx = j
        array[i], array[min_idx] = array[min_idx], array[i] # 스와프

print(array)


#### 2. 삽입 정렬
 - 특정한 데이터를 적절한 위치에 '삽입'한다는 의미에서 삽입 정렬이라고 부름
 - 삽입 정렬은 특정한 데이터가 적절한 위치에 들어가기 이전에, 그 앞까지의 데이터는 이미 정렬되어 있다고 가정함.
 - 정렬되어 있는 데이터 리스트에서 적절한 위치를 찾은 뒤에, 그 위치에 삽입된다는 특징.
 - 삽입 정렬은 두 번째 데이터부터 시작함. 첫 번째 데이터는 그 자체로 정렬되어 있다고 판단하기 때문.
- 복잡도는 N(O^2)인데, 선택 정렬과 마찬가지로 반복문이 2번 중첩되어 사용되었음

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1): # 인덱스 i부터 1까지 감소하며 반복하는 문법
        if array[j] < array[j - 1]: # 한 칸씩 왼쪽으로 이동
            array[j], array[j - 1] = array[j - 1], array[j]
        else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break

print(array)


#### 3. 퀵 정렬
 - 정렬 알고리즘 중 가장 많이 사용됨
 - 퀵 정렬은 기준(피벗)을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작
 - 피벗을 설정한 후에는 왼쪽에서부터 피벗보다 큰 데이터를 찾고, 오른쪽에서부터 피벗보다 작은 데이터를 찾음.
   그 다음 큰 데이터와 작은 데이터의 위치를 서로 교환해줌.
 - 퀵 정렬의 평균 시간 복잡도는 O(Nlog(N))이다. 앞의 두 알고리즘에 비해 매우 빠른 편


# 퀵 정렬 소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
    if start >= end: # 원소가 1개인 경우 종료
        return
    pivot = start # 피벗은 첫 번째 원소
    left = start + 1
    right = end
    while left <= right:
        # 피벗보다 큰 데이터를 찾을 때까지 반복
        while left <= end and array[left] <= array[pivot]:
            right += 1
        # 피벗보다 작은 데이터를 찾을 때까지 반복
        while right > start and array[right] >= array[pivot]:
            right -= 1
        if left > right: # 엇 갈렷다면 작은 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
        # else: # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
            array[left], array[right] = array[right], array[left]
    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right - 1)
    quick_sort(array, right + 1, end)

quick_sort(array, 0, len(array) - 1)
print(array)

# 파이썬의 장점을 살린 퀵 정렬 소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array):
    # 리스트가 하나 이하의 원소만을 담고 있다면 종료
    if len(array) <= 1:
        return array

    pivot = array[0] # 피벗은 첫 번째 원소
    tail = array[1:] # 피벗을 제외한 리스트

    left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
    right_sidx = [x for x in tail if x > pivot] # 분할된 오른쪽 부분
    
    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트를 반환
    return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))


#### 4. 계수 정렬
 - 계수 정렬(Count Sort) 알고리즘은 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘이다
 - 계수 정렬은 최악의 경우에도 수행 시간 O(N + K)를 보장한다.
 - 계수 정렬은 '데이터의 크기 범위가 제한 되어 정수 형태로 표현할 수 있을 때'만 사용할 수 있다.
 - 일반적으로 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적으로 사용가능
 - 일반적으로 별도의 리스트를 선언하고 그 안에 정렬에 대한 정보를 담는다는 특성이 있음
 - 현존하는 정렬 알고리즘 중에서 기수 정렬과 더불어 가장 빠름

# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언(모든 값으로 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)):
    count[array[i]] += 1 # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)): # 리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i, end=' ') # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력



#### 5. 파이썬의 정렬 라이브러리
 - sorted(), sort()
 - 병합 정렬을 기반으로 만들어졌으며, 시간 복잡도 O(Nlog(N))을 보장
 - key 매개변수를 입력으로 받을 수 있음.
   key 값으로는 하나의 함수가 들어가야 하며 이는 정렬 기준이 됨.


#### 6. 코테에서의  정렬 출제 유형
 - 문제에서 별도의 요구가 없다면 기본 정렬 라이브러리,
   데이터의 범위가 한정되어 있으며 더 빠르게 동작해야 할 때는 계수 정렬을 이용
1. 정럴 라이브러리로 풀 수 있는 문제: 단순히 정렬 기법을 알고 있는지 물어보는 문제로,
   기본 정렬 라이브러리의 사용 방법을 숙지하고 있으면 어렵지 않게 풀 수 있음
2. 정렬 알고리즘의 원리에 대해서 물어보는 문제: 선택 정렬, 삽입 정렬, 퀵 정렬 등의
   원리를 알고 있어야 문제를 풀 수 있음
3. 더 빠른 정렬이 필요한 문제: 퀵 정렬 기반의 정렬 기법으로는 풀 수 없으며 계수 정렬 등의
  다른 정렬 알고리즘을 이용하거나 문제에서 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야 풀 수 있음


─────────────────────────────────────────────


# 이진 탐색
 - 탐색 범위를 반으로 좁혀가며 빠르게 탐색하는 알고리즘


#### 1. 순차 탐색
 - 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법

def sequential_search(n, target, array):
    # 각 원소를 하나씩 확인하며
    for i in range(n):
        # 현재의 원소가 찾고자 하는 원소와 동일한 경우
        if array[i] == target:
            return i + 1 # 현재의 위치 반환. 인덱스는 0부터 시작하므로 1 더하기

#### 2. 이진 탐색
 - 내열 내부의 데이터가 정렬되어 있어야만 사용가능
 - 이진 탐색은 위치를 나타내는 변수 3개를 사용하는데 탐색하고자 하는 범위의 시작점, 끝점, 그리고 중간점이다.
 - 찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교해서 원하는 데이터를 찾음
 - 시간 복잡도가 O(log(N))
 - 처리해야 할 데이터의 개수나 값이 1,000만 단위 이상으로 넘어가면 이진 탐진 탐색과 같이 O(log(N))의
   속도를 내야 하는 알고리즘을 떠올려야 문제를 풀 수 있는 경우가 많다.


# 이진 탐색 소스코드 구현 (재귀 함수)
def binary_search(array, target, start, end):
    if start > end:
        return Nond
    mid  = (start + end) // 2
    # 찾은 경우 중간점 인덱스 반환
    if array[mid] == target:
        return mid
    # 중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인
    elif array[mid] > target:
        return binary_search(array, target, start, mid - 1)
    # 중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인
    else:
        return binary_search(array, target, mid + 1, end)

# 이진 탐색 소스코드 구현 (반복문)
def binary_search(array, target, start, end):
    while start <= end:
        mid = (start + end) // 2
        # 찾은 경우 중간점 인덱스 반환
        if array[mid] == target:
            return mid
        # 중간점의 값보다 찾고자 하는 값이 적은 경우 왼쪽 확인
        elif array[mid] > target:
            end = mid - 1
        # 중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인
        else:
            start = mid + 1
    return None


#### 3. 이진 탐색 트리
 - 트리 자료구조 중에서 가장 간단한 형태가 이진 탐색 트리임.
 - 이진 탐색 트리란 이진 탐색이 동작할 수 있도록 고안된, 효율적인 탐색이 가능한 자료구조임
 - 이진 탐색 트리는 다음과 같은 특징을 가짐
    - 부모 노드보다 왼쪽 자식 노드가 작다.
    - 부모 노드보다 오른쪽 자식 노드가 크다.
    -> 왼쪽 자식 노드 < 부모 노드 < 오른쪽 자식 노드





























