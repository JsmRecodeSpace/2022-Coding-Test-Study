

#### 스택

 - 스택Stack은 선입후출(First In Last Out)구조 또는 후입선출(Last In First Out)구조이다.
 - 파이썬에서 스택을 이용할 떄에는 별도의 라이브러리를 사용할 필요가 없다.  
   기본 리스트에서 append()와 pop() 메서드를 이용하면 스택 자료구조와 동일하게 작동한다.

#### 큐

 - 큐는 선입선출(First In First Out) 구조이다.
 - 파이썬으로 큐를 구현할 때는 collections 모듈에서 제공하는 deque 자료구조를 활용한다.
 - deque는 데이터를 넣고 빼는 속도가 리스트 자료형에 비해 효율적이며 queue 라이브러리를 이용하는 것보다 더 간단하다.
 - deque 객체를 리스트 자료형으로 변경하고자 한다면 list() 메서드를 이용한다. list(queue)
from collections import deque

queue = deque()
queue.append(5) # 삽입
queue.popleft() # 먼저 들어온 것 삭제
queue.reverse() # 다음 출력을 위해 역순으로 바꾸기



#### DFS(Depth-First Search)
 - 깊이 우선 탐색, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
 - 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후,  
   다시 돌아가 다른 경로로 탐색하는 알고리즘
 - 스택 자료구조를 이용하며 다음과 같은 동작 과정
    - 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
    - 2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 노드를 스택에 넣고 방문 처리를 함.  
      방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄
    - 2의 과정을 더 이상 수행할 수 없을 때까지 반복
 - 데이터의 개수가 N개인 경우 O(N)의 시간이 소요
 - DFS는 스택을 이용하는 알고리즘이기 때문에 실제 구현은 재귀 함수를 이용했을 때 매우 간결하게 구현할 수 있음

# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
 [],
 [2, 3, 8],
 [1, 7],
 [1, 4, 5],
 [3, 5],
 [7],
 [2, 6, 8],
 [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

# 정의된 DFS 함수 호출
dfs(graph, 1, visited)


#### BFS(Breath-First Search)
 - 너비 우선 탐색, 가까운 노드부터 탐색하는 알고리즘
 - DFS는 최대한 멀리 있는 노드를 우선으로 탐색하는 방식으로 동작한다면, BFS는 반대임
 - BFS 구현은 선입선출 방식인 큐 자료구조를 이용하는 것이 정석임.  
   인접한 노드를 반복적으로 큐에 넣도록 알고리즘을 작성하면 자연스럽게 먼저 들어온 것이 먼저 나가게 되어,
   가까운 노드부터 탐색을 진행하게 됨

1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다.
2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다.
3. 2번의 과정을 더 이상 수행할 수 없을 때까지 방문한다.

 - 구현에 있어 deque 라이브러리를 사용하는 것이 좋으며 탐색을 수행함에 있어 O(N)의 시간이 소요된다.
 - 일반적으로 수행 시가나은 DFS보다 좋은 편이다.


from collections import deque

# BFS 메서드 정의
def bfs(graph, start, visited):
  # 큐(queue) 구현을 위해 deque 라이브러리 사용
  queue = deque([start])
  # 현재 노드를 방문 처리
  visited[start] = True
  # 큐가 빌 때까지 반복
  while queue:
    # 큐에서 하나의 원소를 뽑아 출력
    v = queue.popleft()
    print(v, end=' ')
    # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
    for i in graph[v]:
      if not visited[i]:
        queue.append(i)
        visited[i] = True

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
 [],
 [2, 3, 8],
 [1, 7],
 [1, 4, 5],
 [3, 5],
 [3, 4],
 [7],
 [2, 6, 8],
 [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

# 정의된 DFS 함수 호출
bfs(graph, 1, visited)


DFS - 스택, 재귀 함수 이용
BFS - 큐, 큐 자료구조 이용




